{
  "swagger": "2.0",
  "info": {
    "description": "This is the server for Psyduck, an online platform for users to purchase books.",
    "version": "1.0.0",
    "title": "Psyduck",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@psyduck.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/api",
  "tags": [
    {
      "name": "users",
      "description": "Everything about our Users"
    },
    {
      "name": "comments",
      "description": "Access to user Comments about their orders"
    },
    {
      "name": "catalogs",
      "description": "Access to our book Catalogs information"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/api/users": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Add a newly registered user",
        "description": "",
        "operationId": "addUser",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Finds Users by query parameters",
        "operationId": "findUserByQuery",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userquery",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid query parameter value"
          }
        }
      }
    },
    "/api/users/{user_id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Find user by ID",
        "description": "Returns a single user",
        "operationId": "getUserById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUsers",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user id supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUsers",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/users/{user_id}/comments": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "",
        "description": "Returns comments related to a user",
        "operationId": "getUserComments",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of user that comments are related",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Comments not found"
          }
        }
      }
    },
    "/api/comments": {
      "post": {
        "tags": [
          "comments"
        ],
        "summary": "Add a new comment",
        "description": "",
        "operationId": "addComment",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Comment object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "comments"
        ],
        "summary": "Finds Comments by query parameters",
        "operationId": "findCommentByQuery",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "commentquery",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "description": "Invalid query parameter value"
          }
        }
      }
    },
    "/api/comments/{comment_id}": {
      "get": {
        "tags": [
          "comments"
        ],
        "summary": "Find comments by ID",
        "description": "Returns a single Comment",
        "operationId": "getCommentByID",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "description": "ID of comment to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      },
      "put": {
        "tags": [
          "comments"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateComments",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "description": "comment that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated comment object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      },
      "delete": {
        "tags": [
          "comments"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteComments",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "description": "The comment that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid comment id supplied"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      }
    },
    "/api/comments/{comment_id}/responses": {
      "get": {
        "tags": [
          "comments"
        ],
        "summary": "",
        "description": "Returns responses related to a comment",
        "operationId": "getCommentResponses",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "comment_id",
            "in": "path",
            "description": "ID of comment that respones are related",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Responses not found"
          }
        }
      }
    },
    "/api/catalogs": {
      "post": {
        "tags": [
          "catalogs"
        ],
        "summary": "Add a new catalog",
        "description": "",
        "operationId": "addCatalog",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Catalog object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "catalogs"
        ],
        "summary": "Finds Catalogs by query parameters",
        "operationId": "findCatalogByQuery",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "catalogquery",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "400": {
            "description": "Invalid query parameter value"
          }
        }
      }
    },
    "/api/catalogs/{catalog_id}": {
      "get": {
        "tags": [
          "catalogs"
        ],
        "summary": "Find catalog by ID",
        "description": "Returns a single catalog",
        "operationId": "getCatalogById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Catalog not found"
          }
        }
      },
      "put": {
        "tags": [
          "catalogs"
        ],
        "summary": "Updated catalog",
        "description": "",
        "operationId": "updateCatalogs",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "description": "catalogs that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated catalog object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid catalog id supplied"
          },
          "404": {
            "description": "Catalog not found"
          }
        }
      },
      "delete": {
        "tags": [
          "catalogs"
        ],
        "summary": "Delete catalog",
        "description": "",
        "operationId": "deleteCatalogs",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "description": "The catalog that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Catalog not found"
          }
        }
      }
    },
    "/api/catalogs/{catalog_id}/suggestions": {
      "get": {
        "tags": [
          "catalogs"
        ],
        "summary": "",
        "description": "Returns suggestions related to a catalog",
        "operationId": "getCatalogSuggestions",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "description": "ID of catalog that suggestions are related",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Catalog"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Comments not found"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "hashed_password": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        },
        "created_date": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        },
        "catalog_id": {
          "type": "integer",
          "format": "int64"
        },
        "content": {
          "type": "string"
        },
        "created_date": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Catalog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "author": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "publisher": {
          "type": "string"
        }
      }
    }
  }
}